variables:
  # The parent folder where the prod webdeploy should put the web files
  DEPLOY_FOLDER: "superposition.aglick.com"

  DEV_DEPLOY_FOLDER: "superposition-dev.aglick.com"
  # The version of godot to use for the build process
  GODOT_VERSION: 3.3.2
  GODOT_EXPORT_TEMPLATE_DIR: ".local/share/godot/templates"
  BUTLER_VERSION: 15.21.0


stages:
  - setupcache
  - build
  # - test
  - deploy

################################################################################
# Downloads the godot binary and caches it for later pipelines to use without
# needing to redownload it.
################################################################################
setup-cache:
  image: ubuntu:18.04
  stage: setupcache
  cache:
    - key: GODOT_$GODOT_VERSION
      paths:
        - Godot_v${GODOT_VERSION}-stable_linux_headless.64
        - templates/
      policy: pull-push
    - key: BUTLER_$BUTLER_VERSION
      paths:
        - butler
        - 7z.so
        - libc7zip.so
      policy: pull-push

  script:
    # Download wget and unzip if any of the requirements are not already downloaded
    - |
      if [ -f "Godot_v${GODOT_VERSION}-stable_linux_headless.64" ] && [ -d "templates" ] && [ -f butler ]
      then
        echo "All items are installed, not installing wget"
      else
        echo "Installing wget for downloading"
        apt-get update
        apt-get install -y wget unzip
      fi

    # Download the godot headless binary if it is not already downloaded
    - |
      if [ -f "Godot_v${GODOT_VERSION}-stable_linux_headless.64" ]
      then
        echo "Godot Binary Already Cached"
      else
        echo "Binary Not Found, Downloading"
        wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_linux_headless.64.zip
        unzip Godot_v${GODOT_VERSION}-stable_linux_headless.64.zip
        rm Godot_v${GODOT_VERSION}-stable_linux_headless.64.zip
      fi

    # Download the godot export templates if it is not already downloaded
    - |
      if [ -d "templates" ]
      then
        echo "Godot Export Templates Already Cached"
      else
        echo "Godot Export Templates Not Found, Downloading"
        mkdir -v -p ${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable/
        wget -q https://downloads.tuxfamily.org/godotengine/${GODOT_VERSION}/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
        unzip Godot_v${GODOT_VERSION}-stable_export_templates.tpz
        rm Godot_v${GODOT_VERSION}-stable_export_templates.tpz
      fi

    # Download butler from itch.io if it is not already downloaded
    - |
      if [ -f butler ]
      then
        echo "Butler Binary Already Cached"
      else
        echo "No Butler Binary Cached"
        wget -q -L -O butler.zip https://broth.itch.ovh/butler/linux-amd64/${BUTLER_VERSION}/archive/default
        unzip butler.zip
        rm butler.zip
      fi



################################################################################
# Build the linux, windows, web, and mac versions as artifacts to be used in
# later steps.
################################################################################
build-exports:
  image: ubuntu:18.04
  stage: build
  cache:
    - key: GODOT_$GODOT_VERSION
      paths:
        - Godot_v${GODOT_VERSION}-stable_linux_headless.64
        - ${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable/
      policy: pull
    - key: BUTLER_$BUTLER_VERSION
      paths:
        - butler
        - 7z.so
        - libc7zip.so
      policy: pull
  script:
    - mkdir -p /root/${GODOT_EXPORT_TEMPLATE_DIR}
    - ln -s $PWD/templates /root/${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable

    # - echo Godot_v${GODOT_VERSION}-stable_linux_headless.64
    # - ls Godot_v${GODOT_VERSION}-stable_linux_headless.64 || echo "notfound"
    # - echo /root/${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable
    # - ls -al templates || echo "notfound"
    # - ls -al templates/ || echo "notfound"
    # - ls -al /root/${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable || echo "notfound"
    # - ls /root/${GODOT_EXPORT_TEMPLATE_DIR}/${GODOT_VERSION}.stable/ || echo "notfound"
    # - ls .

    # Dump the current version hash into the "version.gd" file so it can be used ingame
    - echo -e "extends Node\n\nfunc id():\n\treturn \""${CI_COMMIT_SHORT_SHA}"\"" > src/version.gd
    # - cat version.gd

    # Godot Export All Of the Builds
    #- ./Godot_v${GODOT_VERSION}-stable_linux_headless.64 --path src --export "Linux/X11"
    #- ./Godot_v${GODOT_VERSION}-stable_linux_headless.64 --path src --export "Windows Desktop"
    #- ./Godot_v${GODOT_VERSION}-stable_linux_headless.64 --path src --export "Mac OSX"
    - ./Godot_v${GODOT_VERSION}-stable_linux_headless.64 --path src --export "HTML5"

    # Install Certificates to make butler happy
    #- apt-get update
    #- apt-get install -y ca-certificates

    # Use butler to upload the three desktop version to itch.io
    #- ./butler push build/linux asherglick/superposition:linux --userversion ${CI_COMMIT_SHORT_SHA}
    #- ./butler push build/windows asherglick/superposition:windows --userversion ${CI_COMMIT_SHORT_SHA}
    #- ./butler push build/osx asherglick/superposition:osx --userversion ${CI_COMMIT_SHORT_SHA}


    # Move .htaccess into the web folder and compress the files
    - mv web_configs/.htaccess build/web/.htaccess

  artifacts:
    paths:
    - build/web
    # Expire after 1 hour
    expire_in: 1 hr



deploy-prod:
  image: asherglick/webdeploy:20170802
  stage: deploy
  script:
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # Add the SSH key stored in the environment to the agent store
    - ssh-add <(echo "$PROD_SSH_PRIVATE_KEY")
    # For Docker builds disable host key checking. Be aware that by adding that
    # you are susceptible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $PROD_USER@$PROD_HOST ls

    # Gzip the bif files
    - gzip -c build/web/index.pck > build/web/index.pck.gz
    - gzip -c build/web/index.wasm > build/web/index.wasm.gz

    # Sync over the files
    - rsync --recursive --archive --verbose -e ssh --delete build/web/ $PROD_USER@$PROD_HOST:/home/$PROD_USER/$DEPLOY_FOLDER/${CI_COMMIT_SHORT_SHA}/
    - ssh $PROD_USER@$PROD_HOST "cd $DEPLOY_FOLDER; tree -a"

    # Update the root redirect to point to the new folder
    - echo "RewriteEngine on\n\nRewriteCond %{HTTPS} !=on\nRewriteRule ^(.*) https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\nRewriteRule ^$ /${CI_COMMIT_SHORT_SHA}/ [L,R=302]" > .htaccess
    - rsync --verbose -e ssh --delete .htaccess $PROD_USER@$PROD_HOST:/home/$PROD_USER/$DEPLOY_FOLDER/.htaccess


  # only:
  #   - master

# deploy-dev:
#   image: asherglick/webdeploy:20170802
#   stage: deploy
#   script:
#     # Run ssh-agent (inside the build environment)
#     - eval $(ssh-agent -s)
#     # Add the SSH key stored in the environment to the agent store
#     - ssh-add <(echo "$DEV_SSH_PRIVATE_KEY")
#     # For Docker builds disable host key checking. Be aware that by adding that
#     # you are susceptible to man-in-the-middle attacks.
#     # WARNING: Use this only with the Docker executor, if you use it with shell
#     # you will overwrite your user's SSH config.
#     - mkdir -p ~/.ssh
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#     - ssh $DEV_USER@$DEV_HOST ls

#     # Sync over the files
#     - rsync --recursive --archive --verbose -e ssh --delete output/ $DEV_USER@$DEV_HOST:/home/$DEV_USER/$DEV_DEPLOY_FOLDER/
#     - ssh $DEV_USER@$DEV_HOST "cd $DEV_DEPLOY_FOLDER; tree -a"
#   only:
#     - dev
