[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://mini_material_glow.tres" type="Material" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;



uniform bool enable = true; // on and off switsch to diesable/enable the outline
uniform float outline_thickness = 0.05; // how thick is the outline?

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	if (enable) {
		float z_dist = clamp((MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).z * -1.0,0.0,50.0);
		VERTEX.y += outline_thickness*z_dist;
	}
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[resource]
resource_local_to_scene = true
next_pass = ExtResource( 1 )
shader = SubResource( 1 )
shader_param/albedo = Color( 0.239216, 0.32549, 0.878431, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/enable = false
shader_param/outline_thickness = 0.01
